// parser generated by Antlr4Rust: "https://github.com/rrevenantt/antlr4rust"
#![allow(unused)]

mod mathlexer;
mod mathparser;
mod mathlistener;
mod mathvisitor;

use antlr_rust::{
    common_token_stream::CommonTokenStream,
    tree::{ParseTree, ParseTreeListener, ParseTreeVisitorCompat, VisitChildren},
    InputStream,
};
use std::{collections::HashMap, f64::consts::E, process::Child};
use maplit::hashmap;
use once_cell::sync::Lazy;
use self::{
    mathlexer::*,
    mathparser::*,
    mathlistener::*,
    mathvisitor::*,
};
use crate::functions::*;
use crate::utilities::*;


pub struct FnStruct {
    definition: ChildFn,
}

impl FnStruct {
    pub fn apply(&self, args: &FnArgs) -> FnResult {
        self.definition.apply(args)
    } 
}

impl Default for FnStruct {
    fn default() -> Self {
        Self {
            definition: "x".to_child_fn()
        }
    }
}

fn string_fn(name: &str, args: Vec<f64>) -> Option<f64> {
    Some (
        match args.len() {
            1 => match name {
                "sin" => args[0].sin(),
                "cos" => args[0].cos(),
                "tan" => args[0].tan(),
                "log" => args[0].log10(),
                "ln" => args[0].ln(),
                _ => return None
            },
            _ => return None
        }
    )
}


struct MathVisitor(ChildFn);


impl ParseTreeVisitorCompat<'_> for MathVisitor {
    type Node = mathParserContextType;
    type Return = ChildFn;

    fn temp_result(&mut self) -> &mut Self::Return {
        &mut self.0
    }

    fn aggregate_results(&self, aggregate: Self::Return, next: Self::Return) -> Self::Return {
        todo!()
    }
}

impl mathVisitorCompat<'_> for MathVisitor {
    fn visit_prog(&mut self, ctx: &ProgContext<'_>) -> Self::Return {
        self.visit(&*ctx.expr().unwrap())
    }

    fn visit_number(&mut self, ctx: &NumberContext<'_>) -> Self::Return {
        ChildFn::Const(
            ctx.NUMBER()
                .unwrap()
                .get_text()
                .parse()
                .unwrap()
        )
    }

    fn visit_pi(&mut self, ctx: &PiContext<'_>) -> Self::Return {
        ChildFn::Const(std::f64::consts::PI)
    }

    fn visit_e(&mut self, ctx: &EContext<'_>) -> Self::Return {
        ChildFn::Const(std::f64::consts::E)
    }

    fn visit_var(&mut self, ctx: &VarContext<'_>) -> Self::Return {
        ChildFn::Var(
            ctx.ID()
                .unwrap()
                .get_text()
                .into_boxed_str()
        )
    }

    fn visit_parens(&mut self, ctx: &ParensContext<'_>) -> Self::Return {
        self.visit(&*ctx.expr().unwrap())
    }

    fn visit_add(&mut self, ctx: &AddContext<'_>) -> Self::Return {
        let mut res: Vec<> = vec![];
        ctx.expr_all
        for i in {

        }
    }

    fn visit_multiply(&mut self, ctx: &MultiplyContext<'_>) -> Self::Return {
        if ctx.MUL().is_some() {
            return a * b
        }
        a / b
    }

    fn visit_power(&mut self, ctx: &PowerContext<'_>) -> Self::Return {
        let a = self.visit(&*ctx.expr(0).unwrap());
        let b = self.visit(&*ctx.expr(1).unwrap());
        a.powf(b)
    }

    fn visit_log(&mut self, ctx: &LogContext<'_>) -> Self::Return {
        let base = self.visit(&*ctx.expr(0).unwrap());
        let arg = self.visit(&*ctx.expr(1).unwrap());

        arg.log(base)
    }

    fn visit_function(&mut self, ctx: &FunctionContext<'_>) -> Self::Return {
        let arg = self.visit(&*ctx.expr().unwrap());
        let name = ctx.ID().unwrap().get_text();
        
        if let Some(v) = string_fn(&name, arg) {
            return v
        }
        panic!("Unrecognized function name")
    }
}

// --> see listener and visitor on https://github.com/rrevenantt/antlr4rust/blob/master/tests/visitors_tests.rs

// #[should_panic]
#[test]
fn test_parser() {
    let lexer = mathLexer::new(InputStream::new("2^(3 - 1) * (1 - cos(pi/2)) + log_5(4 + ln(e))".into()));

    let token_source = CommonTokenStream::new(lexer);
    let mut parser = mathParser::new(token_source);

    let root = parser.prog().unwrap();

    let result = MathVisitor(0.0).visit(&*root);

    assert_eq!(result, 5.0);
}


